/**
 * üö® Problema: Viola√ß√£o do Princ√≠pio da Segrega√ß√£o de Interfaces (ISP - Interface Segregation Principle)
 *
 * O c√≥digo abaixo **viola o ISP**, pois a interface `Funcionario` obriga **todos os tipos de funcion√°rios**
 * a implementar m√©todos que **n√£o fazem sentido para eles**.
 *
 * O ISP afirma que **nenhuma classe deve ser for√ßada a implementar m√©todos que n√£o utiliza**.
 *
 * üî¥ **Problemas encontrados:**
 * 1Ô∏è‚É£ `FuncionarioPJ` n√£o recebe benef√≠cios nem registra ponto, mas precisa implementar esses m√©todos.
 * 2Ô∏è‚É£ `Estagiario` tem bolsa-aux√≠lio em vez de sal√°rio tradicional, mas precisa implementar `calcularSalario()`.
 * 3Ô∏è‚É£ Uso de `UnsupportedOperationException` para m√©todos que n√£o fazem sentido, indicando um problema na modelagem da interface.
 *
 * üîπ **Solu√ß√£o correta**:
 *    - Criar **interfaces menores e mais espec√≠ficas** (`Trabalhavel`, `Beneficiavel`, `Registravel`, `Supervisionavel`).
 *    - Garantir que cada funcion√°rio **implementa apenas as interfaces relevantes**.
 *    - Isso torna o c√≥digo **mais flex√≠vel e modular**.
 */

 import java.util.List;

 // ‚ùå INTERFACE √öNICA OBRIGANDO TODOS OS FUNCION√ÅRIOS A IMPLEMENTAR M√âTODOS IN√öTEIS
 interface Funcionario {
     double calcularSalario();
     void receberBeneficios();
     void registrarPonto();
     void definirSupervisor(String supervisor);
 }
 
 // ‚ùå Funcion√°rio CLT -> Ele realmente usa todos os m√©todos, ent√£o faz sentido
 class FuncionarioCLT implements Funcionario {
     private double salario;
     private String supervisor;
 
     public FuncionarioCLT(double salario) {
         this.salario = salario;
     }
 
     @Override
     public double calcularSalario() {
         return salario;
     }
 
     @Override
     public void receberBeneficios() {
         System.out.println("üì¶ Funcion√°rio CLT recebendo benef√≠cios!");
     }
 
     @Override
     public void registrarPonto() {
         System.out.println("‚è∞ Funcion√°rio CLT registrando ponto!");
     }
 
     @Override
     public void definirSupervisor(String supervisor) {
         this.supervisor = supervisor;
         System.out.println("üßë‚Äçüíº Supervisor definido: " + supervisor);
     }
 }
 
 // ‚ùå Funcion√°rio PJ -> N√ÉO RECEBE BENEF√çCIOS, mas √© obrigado a implementar esse m√©todo!
 class FuncionarioPJ implements Funcionario {
     private double valorContrato;
 
     public FuncionarioPJ(double valorContrato) {
         this.valorContrato = valorContrato;
     }
 
     @Override
     public double calcularSalario() {
         return valorContrato;
     }
 
     @Override
     public void receberBeneficios() {
         throw new UnsupportedOperationException("‚ùå Funcion√°rio PJ n√£o recebe benef√≠cios!");
     }
 
     @Override
     public void registrarPonto() {
         throw new UnsupportedOperationException("‚ùå Funcion√°rio PJ n√£o registra ponto!");
     }
 
     @Override
     public void definirSupervisor(String supervisor) {
         System.out.println("üßë‚Äçüíª Funcion√°rio PJ n√£o tem supervisor, mas recebeu um nome: " + supervisor);
     }
 }
 
 // ‚ùå Estagi√°rio -> N√ÉO TEM SAL√ÅRIO COMPLETO, mas √© obrigado a implementar c√°lculo de sal√°rio!
 class Estagiario implements Funcionario {
     private double bolsaAuxilio;
     private String supervisor;
 
     public Estagiario(double bolsaAuxilio) {
         this.bolsaAuxilio = bolsaAuxilio;
     }
 
     @Override
     public double calcularSalario() {
         return bolsaAuxilio;
     }
 
     @Override
     public void receberBeneficios() {
         System.out.println("üéì Estagi√°rio recebe vale-transporte e bolsa aux√≠lio.");
     }
 
     @Override
     public void registrarPonto() {
         System.out.println("‚è≥ Estagi√°rio registrando ponto, mas tem hor√°rio reduzido!");
     }
 
     @Override
     public void definirSupervisor(String supervisor) {
         this.supervisor = supervisor;
         System.out.println("üéì Supervisor do estagi√°rio definido: " + supervisor);
     }
 }
 
 // ‚ùå C√≥digo principal esperando que todos os funcion√°rios funcionem do mesmo jeito
 // public class Main {
 //     public static void main(String[] args) {
 //         List<Funcionario> funcionarios = List.of(
 //                 new FuncionarioCLT(5000),
 //                 new FuncionarioPJ(7000),
 //                 new Estagiario(1500)
 //         );
 
 //         for (Funcionario f : funcionarios) {
 //             System.out.println("üíº Processando funcion√°rio...");
 
 //             try {
 //                 f.registrarPonto();
 //                 f.receberBeneficios();
 //                 f.definirSupervisor("Carlos");
 //                 System.out.println("üí∞ Sal√°rio: R$ " + f.calcularSalario());
 //             } catch (UnsupportedOperationException e) {
 //                 System.out.println("üö® ERRO: " + e.getMessage());
 //             }
 
 //             System.out.println("----------------------------");
 //         }
 //     }
 // }