/**
 * üö® Problema: Viola√ß√£o do Princ√≠pio da Segrega√ß√£o de Interfaces (ISP - Interface Segregation Principle)
 *
 * O c√≥digo abaixo **viola o ISP**, pois a interface `Animal` obriga **todos os animais** a implementarem m√©todos
 * que **n√£o fazem sentido para eles**.
 *
 * O ISP afirma que **nenhuma classe deve ser for√ßada a implementar m√©todos que n√£o utiliza**.
 *
 * üî¥ **Problemas encontrados:**
 * 1Ô∏è‚É£ `Cachorro` precisa implementar `voar()` e `nadar()`, mesmo que cachorros **n√£o voem nem todos nadem**.
 * 2Ô∏è‚É£ `Passaro` precisa implementar `correr()` e `nadar()`, mesmo que p√°ssaros **n√£o corram nem nadem**.
 * 3Ô∏è‚É£ **Uso de `UnsupportedOperationException`** para m√©todos que n√£o fazem sentido para a classe,
 *    indicando um problema na modelagem das interfaces.
 *
 * üîπ **Solu√ß√£o correta**:
 *    - Criar interfaces **separadas** para cada comportamento (`AnimalCorredor`, `AnimalVoador`, `AnimalNadador`).
 *    - Garantir que cada animal **implementa apenas as interfaces relevantes**.
 *    - Isso torna o c√≥digo **mais flex√≠vel e modular**.
 */

 // ‚ùå Interface errada! Obriga todos os animais a implementarem coisas que n√£o fazem!
 interface Animal {
    void comer();
    void correr();
    void voar();
    void nadar();
}

// üê∂ Cachorros n√£o voam nem nadam, mas s√£o obrigados a implementar os m√©todos
class Cachorro implements Animal {
    public void comer() {
        System.out.println("üê∂ O cachorro est√° comendo.");
    }

    public void correr() {
        System.out.println("üê∂ O cachorro est√° correndo.");
    }

    public void voar() { // ‚ùå Cachorros n√£o voam!
        throw new UnsupportedOperationException("Cachorros n√£o voam!");
    }

    public void nadar() { // ‚ùå Nem todos os cachorros nadam!
        throw new UnsupportedOperationException("Cachorros n√£o nadam!");
    }
}

// üê¶ P√°ssaros s√£o obrigados a implementar "correr" e "nadar", mesmo sem precisar
class Passaro implements Animal {
    public void comer() {
        System.out.println("üê¶ O p√°ssaro est√° comendo.");
    }

    public void correr() { // ‚ùå Alguns p√°ssaros n√£o correm
        throw new UnsupportedOperationException("P√°ssaros n√£o correm!");
    }

    public void voar() {
        System.out.println("üê¶ O p√°ssaro est√° voando!");
    }

    public void nadar() { // ‚ùå P√°ssaros n√£o nadam!
        throw new UnsupportedOperationException("P√°ssaros n√£o nadam!");
    }
}