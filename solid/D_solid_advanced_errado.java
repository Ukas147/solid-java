/**
 * üö® Problema: Viola√ß√£o do Princ√≠pio da Invers√£o de Depend√™ncia (DIP - Dependency Inversion Principle)
 *
 * O c√≥digo abaixo **viola o DIP**, pois `ProcessadorPedido` **depende diretamente de implementa√ß√µes concretas**
 * (`PagamentoCartao` e `NotificacaoEmail`) em vez de depender de abstra√ß√µes (interfaces).
 *
 * O DIP afirma que:
 * 1Ô∏è‚É£ **M√≥dulos de alto n√≠vel (ex: `ProcessadorPedido`) n√£o devem depender de m√≥dulos de baixo n√≠vel (`PagamentoCartao`, `NotificacaoEmail`).**
 * 2Ô∏è‚É£ **Ambos devem depender de abstra√ß√µes (interfaces).**
 *
 * üî¥ **Problemas encontrados:**
 * 1Ô∏è‚É£ **Acoplamento alto** ‚Üí `ProcessadorPedido` depende diretamente de `PagamentoCartao` e `NotificacaoEmail`,
 *    tornando dif√≠cil a adi√ß√£o de novos m√©todos de pagamento ou notifica√ß√£o.
 *
 * 2Ô∏è‚É£ **C√≥digo pouco flex√≠vel** ‚Üí Se quisermos adicionar `PagamentoPix` ou `NotificacaoSMS`, precisamos modificar
 *    `ProcessadorPedido`, o que vai contra o **OCP (Open-Closed Principle)**.
 *
 * 3Ô∏è‚É£ **Dificuldade de manuten√ß√£o** ‚Üí Se `PagamentoCartao` for alterado, `ProcessadorPedido` pode ser afetado diretamente.
 *
 * üîπ **O que aconteceria sem essa estrutura?**
 *    - Se quisermos suportar um novo m√©todo de pagamento (ex: `PagamentoCripto`) ou um novo canal de notifica√ß√£o
 *      (ex: `NotificacaoWhatsApp`), precisar√≠amos modificar `ProcessadorPedido` diretamente.
 *    - Isso tornaria o c√≥digo mais r√≠gido e dif√≠cil de reutilizar.
 */

 import java.util.ArrayList;
 import java.util.List;
 
 // ‚ùå CLASSE QUE GERENCIA PEDIDOS, MAS DEPENDE DIRETAMENTE DE IMPLEMENTA√á√ïES CONCRETAS!
 class ProcessadorPedido {
     private PagamentoCartao pagamentoCartao;
     private NotificacaoEmail notificacaoEmail;
     private List<String> pedidos = new ArrayList<>();
 
     public ProcessadorPedido() {
         this.pagamentoCartao = new PagamentoCartao();
         this.notificacaoEmail = new NotificacaoEmail();
     }
 
     public void processarPedido(String pedido, double valor, String emailCliente) {
         pedidos.add(pedido);
 
         // ‚ùå DEPEND√äNCIA DIRETA EM UMA CLASSE CONCRETA DE PAGAMENTO
         boolean sucesso = pagamentoCartao.processarPagamento(valor);
         if (sucesso) {
             System.out.println("‚úÖ Pedido confirmado: " + pedido);
             
             // ‚ùå DEPEND√äNCIA DIRETA EM UMA CLASSE CONCRETA DE NOTIFICA√á√ÉO
             notificacaoEmail.enviar(emailCliente, "Seu pedido foi confirmado!");
         } else {
             System.out.println("‚ùå Falha no pagamento do pedido: " + pedido);
         }
     }
 }
 
 // ‚ùå CLASSE DE PAGAMENTO ALTAMENTE ACOPLADA
 class PagamentoCartao {
     public boolean processarPagamento(double valor) {
         System.out.println("üí≥ Processando pagamento de R$ " + valor + " via cart√£o...");
         return valor > 0;
     }
 }
 
 // ‚ùå CLASSE DE NOTIFICA√á√ÉO ALTAMENTE ACOPLADA
 class NotificacaoEmail {
     public void enviar(String email, String mensagem) {
         System.out.println("üìß Enviando e-mail para " + email + ": " + mensagem);
     }
 }
 
 // üè° Testando o sistema de pedidos (com c√≥digo ruim)
 // public class Main {
 //     public static void main(String[] args) {
 //         ProcessadorPedido processador = new ProcessadorPedido();
 //
 //         processador.processarPedido("Laptop Gamer", 5000, "cliente@email.com");
 //         processador.processarPedido("Mouse sem fio", 200, "cliente@email.com");
 //     }
 // } 