/**
 * üöÄ Aplica√ß√£o correta do Princ√≠pio da Segrega√ß√£o de Interfaces (ISP - Interface Segregation Principle)
 *
 * Este c√≥digo implementa corretamente a **segrega√ß√£o de interfaces**, garantindo que **cada classe implementa apenas os m√©todos relevantes** para seu comportamento.
 * Assim, evitamos que classes herdem m√©todos que **n√£o fazem sentido para elas**, respeitando o **ISP (Interface Segregation Principle)**.
 *
 * üîπ **O que foi corrigido aqui?**
 *    - Criamos a **interface `Movivel`**, garantindo que todos os ve√≠culos podem **se mover e parar**, sem impor m√©todos desnecess√°rios.
 *    - **Herdamos corretamente a classe `Veiculo`** para garantir que apenas ve√≠culos motorizados compartilhem atributos como `velocidade`.
 *    - **Bicicletas e outros ve√≠culos especiais** n√£o herdam m√©todos que n√£o fazem sentido, pois apenas implementam `Movivel`.
 *
 * üîπ **Benef√≠cios dessa abordagem:**
 * 1Ô∏è‚É£ **Respeito ao ISP**  
 *     - Bicicletas **n√£o herdam m√©todos desnecess√°rios**, como atributos de velocidade.
 *     - Carros el√©tricos t√™m **seu pr√≥prio m√©todo `carregarBateria()`**, sem depender de l√≥gica de combust√≠veis.
 *
 * 2Ô∏è‚É£ **C√≥digo mais modular e reutiliz√°vel**  
 *     - Cada classe implementa **apenas os m√©todos relevantes**, tornando o c√≥digo mais limpo.
 *
 * 3Ô∏è‚É£ **Baixo acoplamento e alta coes√£o**  
 *     - Classes t√™m responsabilidades bem definidas e podem ser reutilizadas independentemente.
 *
 * üîπ **O que aconteceria sem essa estrutura?**
 *    - Se `Bicicleta` herdasse de `Veiculo`, teria um atributo de velocidade **que n√£o faz sentido para ela**.
 *    - Se `CarroEletrico` herdasse de `Carro` sem modifica√ß√£o, poderia ter **m√©todos que lidam com combust√≠veis**.
 *    - O c√≥digo ficaria confuso e dif√≠cil de manter.
 */
 interface Movivel {
     void mover(double velocidade);
     void parar();
 }
 
 // ‚úÖ Classe abstrata para ve√≠culos que podem acelerar normalmente
 abstract class Veiculo implements Movivel {
     protected String nome;
     protected double velocidade;
 
     public Veiculo(String nome) {
         this.nome = nome;
         this.velocidade = 0;
     }
 
     @Override
     public void parar() {
         this.velocidade = 0;
         System.out.println("üõë " + nome + " parou.");
     }
 
     public String getNome() {
         return nome;
     }
 }
 
 // ‚úÖ Carros podem acelerar normalmente
 class Carro extends Veiculo {
     public Carro(String nome) {
         super(nome);
     }
 
     @Override
     public void mover(double velocidade) {
         this.velocidade += velocidade;
         System.out.println("üöó " + nome + " acelerando para " + this.velocidade + " km/h");
     }
 }
 
 // ‚úÖ Bicicletas n√£o aceleram, mas podem se mover
 class Bicicleta implements Movivel {
     private String nome;
 
     public Bicicleta(String nome) {
         this.nome = nome;
     }
 
     @Override
     public void mover(double velocidade) {
         System.out.println("üö≤ " + nome + " est√° pedalando a " + velocidade + " km/h");
     }
 
     @Override
     public void parar() {
         System.out.println("üõë " + nome + " parou de pedalar.");
     }
 }
 
 // ‚úÖ Carros el√©tricos precisam estar carregados antes de acelerar
 class CarroEletrico extends Carro {
     private boolean carregado;
 
     public CarroEletrico(String nome) {
         super(nome);
         this.carregado = false;
     }
 
     public void carregarBateria() {
         this.carregado = true;
         System.out.println("‚ö° " + nome + " est√° carregado!");
     }
 
     @Override
     public void mover(double velocidade) {
         if (!carregado) {
             System.out.println("‚ùå " + nome + " precisa ser carregado antes de se mover!");
             return;
         }
         super.mover(velocidade);
     }
 }
 
 // ‚úÖ Trem segue trilhos e n√£o pode acelerar bruscamente
 class Trem extends Veiculo {
     public Trem(String nome) {
         super(nome);
     }
 
     @Override
     public void mover(double velocidade) {
         if (velocidade > 20) {
             System.out.println("‚ùå Trem n√£o pode acelerar t√£o r√°pido!");
             return;
         }
         this.velocidade += velocidade;
         System.out.println("üöÜ " + nome + " se movendo a " + this.velocidade + " km/h nos trilhos.");
     }
 }
 
 // üè° C√≥digo agora est√° correto!
//  public class Main {
//      public static void main(String[] args) {
//          List<Movivel> veiculos = new ArrayList<>();
//          veiculos.add(new Carro("Sedan"));
//          veiculos.add(new Bicicleta("Mountain Bike"));
//          veiculos.add(new CarroEletrico("Tesla"));
//          veiculos.add(new Trem("Trem Expresso"));
 
//          for (Movivel v : veiculos) {
//              v.mover(30);
//              v.parar();
//          }
//      }
//  } 