/**
 * üéØ Aplica√ß√£o dos Princ√≠pios SOLID: Aberto/Fechado (OCP) e Estrat√©gia
 *
 * Este c√≥digo implementa um **sistema flex√≠vel de c√°lculo de impostos**, utilizando **Interfaces, OCP (Open/Closed Principle) e Strategy Pattern**.
 *
 * üîπ **O que foi feito corretamente aqui?**
 *    - Criamos a interface **RegraDeImposto**, que define um contrato para qualquer regra de imposto.
 *    - Cada pa√≠s (`ImpostoBrasil`, `ImpostoEUA`, `ImpostoEuropa`) implementa sua pr√≥pria l√≥gica de imposto **sem modificar o c√≥digo principal**.
 *    - A classe **CalculadoraImposto** pode receber **novas regras de impostos** dinamicamente sem precisar ser alterada.
 *
 * üîπ **Benef√≠cios dessa abordagem:**
 * 1Ô∏è‚É£ **Princ√≠pio Aberto/Fechado (OCP)**  
 *     - Podemos adicionar **novos pa√≠ses** sem modificar o c√≥digo existente, apenas criando uma nova implementa√ß√£o da interface `RegraDeImposto`.
 *
 * 2Ô∏è‚É£ **Uso do Padr√£o Strategy**  
 *     - Cada pa√≠s tem **sua pr√≥pria estrat√©gia** de c√°lculo de impostos, encapsulada em classes separadas.
 *
 * 3Ô∏è‚É£ **C√≥digo modular e reutiliz√°vel**  
 *     - A calculadora pode ser facilmente expandida para incluir novos pa√≠ses sem impactar as implementa√ß√µes existentes.
 *
 * 4Ô∏è‚É£ **Facilidade de manuten√ß√£o**  
 *     - Cada regra de imposto √© isolada, tornando o c√≥digo mais organizado e f√°cil de testar.
 *
 * üîπ **O que aconteceria sem essa estrutura?**
 *    - Se tiv√©ssemos uma √∫nica classe com **um grande switch-case ou m√∫ltiplos if/else**, o c√≥digo ficaria **dif√≠cil de manter e expandir**.
 *    - A cada novo pa√≠s adicionado, precisar√≠amos **modificar a classe principal**, violando o **OCP**.
 */

 import java.util.HashMap;
 import java.util.Map;
 
 // ‚úÖ Criamos uma interface que representa qualquer c√°lculo de imposto
 interface RegraDeImposto {
     double calcular(String categoria, double preco);
 }
 
 // ‚úÖ Implementa√ß√£o do imposto para o Brasil
 class ImpostoBrasil implements RegraDeImposto {
     private static final Map<String, Double> taxas = new HashMap<>();
 
     static {
         taxas.put("eletronico", 0.30);
         taxas.put("livro", 0.10);
         taxas.put("alimento", 0.05);
     }
 
     public double calcular(String categoria, double preco) {
         return preco * taxas.getOrDefault(categoria, 0.15);
     }
 }
 
 // ‚úÖ Implementa√ß√£o do imposto para os EUA
 class ImpostoEUA implements RegraDeImposto {
     private static final Map<String, Double> taxas = new HashMap<>();
 
     static {
         taxas.put("eletronico", 0.25);
         taxas.put("livro", 0.08);
         taxas.put("alimento", 0.02);
     }
 
     public double calcular(String categoria, double preco) {
         return preco * taxas.getOrDefault(categoria, 0.10);
     }
 }
 
 // ‚úÖ Implementa√ß√£o do imposto para a Europa
 class ImpostoEuropa implements RegraDeImposto {
     private static final Map<String, Double> taxas = new HashMap<>();
 
     static {
         taxas.put("eletronico", 0.40);
         taxas.put("livro", 0.12);
         taxas.put("alimento", 0.07);
     }
 
     public double calcular(String categoria, double preco) {
         return preco * taxas.getOrDefault(categoria, 0.20);
     }
 }
 
 // ‚úÖ Classe que faz o gerenciamento de impostos de forma aberta para extens√£o
 class CalculadoraImposto {
     private Map<String, RegraDeImposto> regras = new HashMap<>();
 
     public CalculadoraImposto() {
         regras.put("brasil", new ImpostoBrasil());
         regras.put("eua", new ImpostoEUA());
         regras.put("europa", new ImpostoEuropa());
     }
 
     public void adicionarRegra(String pais, RegraDeImposto regra) {
         regras.put(pais.toLowerCase(), regra);
     }
 
     public double calcularImposto(String pais, String categoria, double preco) {
         RegraDeImposto regra = regras.get(pais.toLowerCase());
         if (regra == null) {
             throw new IllegalArgumentException("‚ùå Pa√≠s n√£o suportado!");
         }
         return regra.calcular(categoria, preco);
     }
 }
 
 // üè° Testando o sistema de impostos (agora modularizado!)
//  public class Main {
//      public static void main(String[] args) {
//          CalculadoraImposto calculadora = new CalculadoraImposto();
 
//          System.out.println("üáßüá∑ Imposto Brasil: R$ " + calculadora.calcularImposto("brasil", "eletronico", 1000));
//          System.out.println("üá∫üá∏ Imposto EUA: R$ " + calculadora.calcularImposto("eua", "livro", 200));
 
//          // ‚úÖ Adicionando um novo pa√≠s SEM modificar a classe CalculadoraImposto!
//          calculadora.adicionarRegra("jap√£o", (categoria, preco) -> preco * 0.35);
//          System.out.println("üáØüáµ Imposto Jap√£o: R$ " + calculadora.calcularImposto("jap√£o", "eletronico", 1000));
//      }
//  } 