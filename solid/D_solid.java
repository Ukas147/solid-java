/**
 * üöÄ Aplica√ß√£o correta do Princ√≠pio da Invers√£o de Depend√™ncia (DIP - Dependency Inversion Principle)
 *
 * O c√≥digo abaixo implementa corretamente **o DIP**, garantindo que **o videogame depende de uma abstra√ß√£o (interface Controle)**
 * e **n√£o de implementa√ß√µes concretas**.
 *
 * O DIP afirma que:
 * 1Ô∏è‚É£ **M√≥dulos de alto n√≠vel (ex: VideoGame)** **n√£o devem depender** de m√≥dulos de baixo n√≠vel (ex: ControleXbox, ControlePlayStation).
 * 2Ô∏è‚É£ **Ambos devem depender de abstra√ß√µes** (ex: `Controle`).
 *
 * üîπ **O que foi corrigido aqui?**
 *    - Criamos **a interface `Controle`**, garantindo que o `VideoGame` **n√£o dependa de um controle espec√≠fico**.
 *    - Agora podemos **adicionar novos controles** sem modificar o c√≥digo do `VideoGame`.
 *
 * üîπ **Benef√≠cios dessa abordagem:**
 * 1Ô∏è‚É£ **Respeito ao DIP**  
 *     - O `VideoGame` pode aceitar qualquer controle **sem precisar conhecer sua implementa√ß√£o**.
 *     - Se criarmos um `ControleBluetooth`, **n√£o precisamos modificar o `VideoGame`**.
 *
 * 2Ô∏è‚É£ **C√≥digo modular e reutiliz√°vel**  
 *     - Se precisarmos suportar um novo controle (ex: `ControleSteam`), basta criar uma nova classe sem alterar c√≥digo existente.
 *
 * 3Ô∏è‚É£ **Baixo acoplamento**  
 *     - O `VideoGame` s√≥ sabe que existe um `Controle`, sem precisar saber detalhes de implementa√ß√£o.
 *
 * üîπ **O que aconteceria sem essa estrutura?**
 *    - Se `VideoGame` dependesse diretamente de `ControleXbox`, `ControlePlayStation` e `ControleNintendo`,
 *      precisar√≠amos modificar o c√≥digo toda vez que um novo controle fosse adicionado.
 *    - Isso tornaria o sistema r√≠gido e dif√≠cil de expandir.
 */

 // üéØ Criamos uma INTERFACE para que o videogame dependa de uma abstra√ß√£o, e n√£o de um controle espec√≠fico
 interface Controle {
  void pressionarBotao();
}

// ‚úÖ Diferentes tipos de controle implementam a interface
class ControleXbox implements Controle {
  public void pressionarBotao() {
      System.out.println("üéÆ Bot√£o pressionado no Controle Xbox!");
  }
}

class ControlePlayStation implements Controle {
  public void pressionarBotao() {
      System.out.println("üéÆ Bot√£o pressionado no Controle PlayStation!");
  }
}

class ControleNintendo implements Controle {
  public void pressionarBotao() {
      System.out.println("üéÆ Bot√£o pressionado no Controle Nintendo!");
  }
}

// ‚úÖ O videogame agora depende da **interface Controle**, e n√£o de um controle espec√≠fico!
class VideoGame {
  private Controle controle;

  // Agora o videogame pode receber QUALQUER CONTROLE que implemente a interface Controle!
  VideoGame(Controle controle) {
      this.controle = controle;
  }

  void jogar() {
      controle.pressionarBotao();
  }
}

// üè° Testando o videogame
// public class Main {
//   public static void main(String[] args) {
//       // Podemos escolher qualquer controle sem mudar o c√≥digo do videogame!
//       Controle controleXbox = new ControleXbox();
//       Controle controlePlayStation = new ControlePlayStation();
//       Controle controleNintendo = new ControleNintendo();

//       System.out.println("\nüéÆ Jogando com Controle Xbox:");
//       VideoGame videogame1 = new VideoGame(controleXbox);
//       videogame1.jogar();

//       System.out.println("\nüéÆ Jogando com Controle PlayStation:");
//       VideoGame videogame2 = new VideoGame(controlePlayStation);
//       videogame2.jogar();

//       System.out.println("\nüéÆ Jogando com Controle Nintendo:");
//       VideoGame videogame3 = new VideoGame(controleNintendo);
//       videogame3.jogar();
//   }
// }