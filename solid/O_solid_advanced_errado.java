/**
 * üö® Problema: Viola√ß√£o do Princ√≠pio Aberto/Fechado (OCP - Open/Closed Principle)
 *
 * Esta classe `CalculadoraImposto` est√° violando o **Princ√≠pio Aberto/Fechado (OCP)** porque:
 * 1Ô∏è‚É£ Sempre que um novo pa√≠s for adicionado, **precisamos modificar o c√≥digo existente**.
 * 2Ô∏è‚É£ O m√©todo `calcularImposto()` **possui l√≥gica condicional r√≠gida**, dificultando a escalabilidade.
 * 3Ô∏è‚É£ O m√©todo `adicionarNovoPais()` **n√£o permite realmente adicionar novos pa√≠ses** de forma independente.
 *
 * üî¥ **Por que isso √© um problema?**
 * - O c√≥digo fica **dif√≠cil de manter**: qualquer mudan√ßa exige modificar a classe principal.
 * - Alto **acoplamento**: `CalculadoraImposto` conhece detalhes sobre impostos de todos os pa√≠ses.
 * - **Baixa escalabilidade**: Se precisarmos adicionar mais pa√≠ses, teremos que expandir um m√©todo que j√° est√° gigante.
 *
 * üîπ **Solu√ß√£o correta**:
 *    - Criar uma interface `RegraDeImposto` para definir um contrato gen√©rico para regras de impostos.
 *    - Implementar **cada pa√≠s separadamente** (`ImpostoBrasil`, `ImpostoEUA`, `ImpostoEuropa`).
 *    - Usar um **Map** na `CalculadoraImposto` para armazenar os impostos dinamicamente.
 *    - Permitir que **novos pa√≠ses sejam adicionados sem modificar a classe CalculadoraImposto**.
 */

 import java.util.HashMap;
 import java.util.Map;
 
 // ‚ùå CLASSE GIGANTE QUE QUEBRA O OCP
 class CalculadoraImposto {
     private static final Map<String, Double> impostosBrasil = new HashMap<>();
     private static final Map<String, Double> impostosEUA = new HashMap<>();
     private static final Map<String, Double> impostosEuropa = new HashMap<>();
 
     static {
         // Impostos para o Brasil
         impostosBrasil.put("eletronico", 0.30);
         impostosBrasil.put("livro", 0.10);
         impostosBrasil.put("alimento", 0.05);
 
         // Impostos para os EUA
         impostosEUA.put("eletronico", 0.25);
         impostosEUA.put("livro", 0.08);
         impostosEUA.put("alimento", 0.02);
 
         // Impostos para a Europa
         impostosEuropa.put("eletronico", 0.40);
         impostosEuropa.put("livro", 0.12);
         impostosEuropa.put("alimento", 0.07);
     }
 
     // ‚ùå M√©todo gigantesco que faz c√°lculos de impostos de v√°rios pa√≠ses
     public double calcularImposto(String pais, String categoria, double preco) {
         double taxa = 0;
 
         if (pais.equalsIgnoreCase("brasil")) {
             taxa = impostosBrasil.getOrDefault(categoria, 0.15);
         } else if (pais.equalsIgnoreCase("eua")) {
             taxa = impostosEUA.getOrDefault(categoria, 0.10);
         } else if (pais.equalsIgnoreCase("europa")) {
             taxa = impostosEuropa.getOrDefault(categoria, 0.20);
         } else {
             System.out.println("‚ùå Pa√≠s n√£o suportado!");
             return 0;
         }
 
         return preco * taxa;
     }
 
     // ‚ùå Sempre que um novo pa√≠s for adicionado, este m√©todo precisa ser modificado!
     public void adicionarNovoPais(String pais, String categoria, double taxa) {
         if (pais.equalsIgnoreCase("brasil")) {
             impostosBrasil.put(categoria, taxa);
         } else if (pais.equalsIgnoreCase("eua")) {
             impostosEUA.put(categoria, taxa);
         } else if (pais.equalsIgnoreCase("europa")) {
             impostosEuropa.put(categoria, taxa);
         } else {
             System.out.println("‚ùå Pa√≠s n√£o suportado para adi√ß√£o de impostos!");
         }
     }
 }
 
 // üè° Testando o sistema de impostos (com c√≥digo ruim)
//  public class Main {
//      public static void main(String[] args) {
//          CalculadoraImposto calculadora = new CalculadoraImposto();
 
//          double impostoBrasil = calculadora.calcularImposto("brasil", "eletronico", 1000);
//          double impostoEUA = calculadora.calcularImposto("eua", "livro", 200);
//          double impostoEuropa = calculadora.calcularImposto("europa", "alimento", 50);
 
//          System.out.println("üáßüá∑ Imposto Brasil: R$ " + impostoBrasil);
//          System.out.println("üá∫üá∏ Imposto EUA: R$ " + impostoEUA);
//          System.out.println("üá™üá∫ Imposto Europa: R$ " + impostoEuropa);
 
//          // Agora a empresa quer adicionar impostos para o Jap√£o! üò®
//          calculadora.adicionarNovoPais("jap√£o", "eletronico", 0.35); // ‚ùå Esse m√©todo n√£o funciona corretamente para novos pa√≠ses!
//      }
//  } 