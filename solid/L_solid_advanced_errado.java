/**
 * üö® Problema: Viola√ß√£o do Princ√≠pio da Substitui√ß√£o de Liskov (LSP - Liskov Substitution Principle)
 *
 * O c√≥digo abaixo **viola o LSP**, pois algumas subclasses (`Bicicleta`, `CarroEletrico`, `Trem`) **n√£o podem ser usadas corretamente no lugar da superclasse `Veiculo`**.
 * O LSP afirma que **uma subclasse deve poder substituir sua superclasse sem alterar o comportamento esperado**.
 *
 * üî¥ **Problemas encontrados:**
 * 1Ô∏è‚É£ `Bicicleta` herda `Veiculo`, mas **n√£o pode acelerar como um carro**, causando erro (`UnsupportedOperationException`).
 * 2Ô∏è‚É£ `CarroEletrico` precisa estar carregado antes de acelerar, mas herda um comportamento incorreto.
 * 3Ô∏è‚É£ `Trem` tem restri√ß√µes espec√≠ficas de acelera√ß√£o que n√£o fazem sentido para um `Veiculo` comum.
 *
 * üîπ **Solu√ß√£o correta**:
 *    - Criar uma **interface `Movivel`**, garantindo que todos os ve√≠culos podem **se mover e parar**.
 *    - Criar classes especializadas para diferentes tipos de ve√≠culos (`VeiculoMotorizado` e `VeiculoNaoMotorizado`).
 *    - Garantir que **nenhuma classe tenha m√©todos que n√£o fazem sentido para ela**.
 */

 import java.util.ArrayList;
 import java.util.List;
 
 // ‚ùå C√≥digo antigo que viola LSP
 class Veiculo {
     protected String nome;
     protected double velocidade;
 
     public Veiculo(String nome) {
         this.nome = nome;
         this.velocidade = 0;
     }
 
     public void acelerar(double aumento) {
         this.velocidade += aumento;
         System.out.println("üöó " + nome + " acelerando para " + velocidade + " km/h");
     }
 
     public void frear() {
         this.velocidade = 0;
         System.out.println("üõë " + nome + " parou.");
     }
 }
 
 // ‚ùå Bicicletas n√£o podem acelerar como carros!
 class Bicicleta extends Veiculo {
     public Bicicleta(String nome) {
         super(nome);
     }
 
     @Override
     public void acelerar(double aumento) {
         throw new UnsupportedOperationException("‚ùå Bicicletas n√£o podem acelerar dessa forma!");
     }
 }
 
 // ‚ùå Carros el√©tricos precisam de bateria antes de acelerar
 class CarroEletrico extends Veiculo {
     private boolean carregado;
 
     public CarroEletrico(String nome) {
         super(nome);
         this.carregado = false;
     }
 
     public void carregarBateria() {
         this.carregado = true;
         System.out.println("‚ö° " + nome + " est√° carregado!");
     }
 
     @Override
     public void acelerar(double aumento) {
         if (!carregado) {
             throw new UnsupportedOperationException("‚ùå Carro el√©trico precisa ser carregado antes de acelerar!");
         }
         super.acelerar(aumento);
     }
 }
 
 // ‚ùå Trens n√£o podem acelerar livremente como carros
 class Trem extends Veiculo {
     public Trem(String nome) {
         super(nome);
     }
 
     @Override
     public void acelerar(double aumento) {
         if (aumento > 20) {
             throw new UnsupportedOperationException("‚ùå Trem n√£o pode acelerar bruscamente!");
         }
         super.acelerar(aumento);
     }
 }
 
 // ‚ùå C√≥digo principal que espera que todos os ve√≠culos funcionem da mesma maneira
 // public class Main {
 //     public static void main(String[] args) {
 //         List<Veiculo> veiculos = new ArrayList<>();
 //         veiculos.add(new Veiculo("Carro Normal"));
 //         veiculos.add(new Bicicleta("Bicicleta Speed"));
 //         veiculos.add(new CarroEletrico("Tesla"));
 //         veiculos.add(new Trem("Trem Expresso"));
 
 //         for (Veiculo v : veiculos) {
 //             try {
 //                 v.acelerar(30);
 //                 v.frear();
 //             } catch (UnsupportedOperationException e) {
 //                 System.out.println("üö® Erro ao tentar acelerar: " + e.getMessage());
 //             }
 //         }
 //     }
 // }
 
 // ‚úÖ C√≥digo corrigido seguindo LSP
 
 // Criamos uma interface que define o comportamento correto
 interface Movivel {
     void mover(double velocidade);
     void parar();
 }
 
 // ‚úÖ Criamos uma classe base para ve√≠culos motorizados
 abstract class VeiculoMotorizado implements Movivel {
     protected String nome;
     protected double velocidade;
 
     public VeiculoMotorizado(String nome) {
         this.nome = nome;
         this.velocidade = 0;
     }
 
     @Override
     public void parar() {
         this.velocidade = 0;
         System.out.println("üõë " + nome + " parou.");
     }
 }
 
 // ‚úÖ Criamos uma classe base para ve√≠culos n√£o motorizados (como Bicicletas)
 abstract class VeiculoNaoMotorizado implements Movivel {
     protected String nome;
 
     public VeiculoNaoMotorizado(String nome) {
         this.nome = nome;
     }
 
     @Override
     public void parar() {
         System.out.println("üõë " + nome + " parou.");
     }
 }
 
 // ‚úÖ Carros podem acelerar normalmente
 class Carro extends VeiculoMotorizado {
     public Carro(String nome) {
         super(nome);
     }
 
     @Override
     public void mover(double velocidade) {
         this.velocidade += velocidade;
         System.out.println("üöó " + nome + " acelerando para " + this.velocidade + " km/h");
     }
 }
 
 // ‚úÖ Bicicletas n√£o aceleram como carros, mas podem se mover
 class Bicicleta extends VeiculoNaoMotorizado {
     public Bicicleta(String nome) {
         super(nome);
     }
 
     @Override
     public void mover(double velocidade) {
         System.out.println("üö≤ " + nome + " est√° pedalando a " + velocidade + " km/h");
     }
 }
 
 // ‚úÖ Carros el√©tricos precisam estar carregados antes de se mover
 class CarroEletrico extends VeiculoMotorizado {
     private boolean carregado;
 
     public CarroEletrico(String nome) {
         super(nome);
         this.carregado = false;
     }
 
     public void carregarBateria() {
         this.carregado = true;
         System.out.println("‚ö° " + nome + " est√° carregado!");
     }
 
     @Override
     public void mover(double velocidade) {
         if (!carregado) {
             System.out.println("‚ùå " + nome + " precisa ser carregado antes de se mover!");
             return;
         }
         this.velocidade += velocidade;
         System.out.println("‚ö° " + nome + " acelerando para " + this.velocidade + " km/h");
     }
 }
 
 // ‚úÖ Trens seguem trilhos e t√™m restri√ß√µes de acelera√ß√£o
 class Trem extends VeiculoMotorizado {
     public Trem(String nome) {
         super(nome);
     }
 
     @Override
     public void mover(double velocidade) {
         if (velocidade > 20) {
             System.out.println("‚ùå Trem n√£o pode acelerar t√£o r√°pido!");
             return;
         }
         this.velocidade += velocidade;
         System.out.println("üöÜ " + nome + " se movendo a " + this.velocidade + " km/h nos trilhos.");
     }
 }

//  public class Main {
//      public static void main(String[] args) {
//          List<Movivel> veiculos = new ArrayList<>();
//          veiculos.add(new Carro("Sedan"));
//          veiculos.add(new Bicicleta("Mountain Bike"));
//          veiculos.add(new CarroEletrico("Tesla"));
//          veiculos.add(new Trem("Trem Expresso"));
 
//          for (Movivel v : veiculos) {
//              v.mover(30);
//              v.parar();
//          }
//      }
//  } 