/**
 * üöÄ Aplica√ß√£o correta do Princ√≠pio da Invers√£o de Depend√™ncia (DIP - Dependency Inversion Principle)
 *
 * O c√≥digo abaixo **implementa corretamente o DIP**, garantindo que **o sistema de pedidos depende de abstra√ß√µes (interfaces)**
 * em vez de depender diretamente de implementa√ß√µes concretas (`PagamentoCartao`, `PagamentoPix`, `NotificacaoEmail`, `NotificacaoSMS`).
 *
 * O DIP afirma que:
 * 1Ô∏è‚É£ **M√≥dulos de alto n√≠vel (ex: `ProcessadorPedido`) n√£o devem depender de m√≥dulos de baixo n√≠vel (`PagamentoCartao`, `NotificacaoEmail`).**
 * 2Ô∏è‚É£ **Ambos devem depender de abstra√ß√µes (interfaces).**
 *
 * üîπ **O que foi corrigido aqui?**
 *    - Criamos **a interface `Pagamento` e `Notificacao`**, garantindo que `ProcessadorPedido` **n√£o dependa de uma implementa√ß√£o espec√≠fica**.
 *    - Agora podemos **adicionar novos m√©todos de pagamento ou notifica√ß√µes sem modificar a classe `ProcessadorPedido`**.
 *
 * üîπ **Benef√≠cios dessa abordagem:**
 * 1Ô∏è‚É£ **Respeito ao DIP**  
 *     - O `ProcessadorPedido` **n√£o depende de implementa√ß√µes concretas**, apenas das interfaces `Pagamento` e `Notificacao`.
 *     - Se criarmos um `PagamentoCripto` ou `NotificacaoWhatsApp`, **n√£o precisamos modificar `ProcessadorPedido`**.
 *
 * 2Ô∏è‚É£ **C√≥digo modular e reutiliz√°vel**  
 *     - Se precisarmos suportar um novo m√©todo de pagamento, basta criar uma nova classe sem alterar o c√≥digo existente.
 *
 * 3Ô∏è‚É£ **Baixo acoplamento**  
 *     - O `ProcessadorPedido` apenas **chama os m√©todos da interface**, sem se preocupar com detalhes da implementa√ß√£o.
 *
 * üîπ **O que aconteceria sem essa estrutura?**
 *    - Se `ProcessadorPedido` dependesse diretamente de `PagamentoCartao` e `NotificacaoEmail`,
 *      precisar√≠amos modificar o c√≥digo toda vez que um novo m√©todo fosse adicionado.
 *    - Isso tornaria o sistema r√≠gido e dif√≠cil de expandir.
 */

 import java.util.ArrayList;
 import java.util.List;
 
 // ‚úÖ INTERFACE PARA PAGAMENTOS (ABSTRA√á√ÉO)
 interface Pagamento {
     boolean processarPagamento(double valor);
 }
 
 // ‚úÖ IMPLEMENTA√á√ÉO DE PAGAMENTO POR CART√ÉO
 class PagamentoCartao implements Pagamento {
     public boolean processarPagamento(double valor) {
         System.out.println("üí≥ Processando pagamento de R$ " + valor + " via cart√£o...");
         return valor > 0;
     }
 }
 
 // ‚úÖ IMPLEMENTA√á√ÉO DE PAGAMENTO POR PIX
 class PagamentoPix implements Pagamento {
     public boolean processarPagamento(double valor) {
         System.out.println("‚ö° Pagamento via Pix de R$ " + valor + " confirmado!");
         return valor > 0;
     }
 }
 
 // ‚úÖ INTERFACE PARA NOTIFICA√á√ÉO (ABSTRA√á√ÉO)
 interface Notificacao {
     void enviar(String destinatario, String mensagem);
 }
 
 // ‚úÖ IMPLEMENTA√á√ÉO DE NOTIFICA√á√ÉO POR E-MAIL
 class NotificacaoEmail implements Notificacao {
     public void enviar(String email, String mensagem) {
         System.out.println("üìß Enviando e-mail para " + email + ": " + mensagem);
     }
 }
 
 // ‚úÖ IMPLEMENTA√á√ÉO DE NOTIFICA√á√ÉO POR SMS
 class NotificacaoSMS implements Notificacao {
     public void enviar(String telefone, String mensagem) {
         System.out.println("üì± Enviando SMS para " + telefone + ": " + mensagem);
     }
 }
 
 // ‚úÖ CLASSE DE PROCESSAMENTO DE PEDIDOS QUE DEPENDE DE ABSTRA√á√ïES
 class ProcessadorPedido {
     private Pagamento metodoPagamento;
     private Notificacao metodoNotificacao;
     private List<String> pedidos = new ArrayList<>();
 
     // ‚úÖ Depend√™ncia injetada via construtor (DIP aplicado corretamente)
     public ProcessadorPedido(Pagamento metodoPagamento, Notificacao metodoNotificacao) {
         this.metodoPagamento = metodoPagamento;
         this.metodoNotificacao = metodoNotificacao;
     }
 
     public void processarPedido(String pedido, double valor, String destinatario) {
         pedidos.add(pedido);
 
         boolean sucesso = metodoPagamento.processarPagamento(valor);
         if (sucesso) {
             System.out.println("‚úÖ Pedido confirmado: " + pedido);
             metodoNotificacao.enviar(destinatario, "Seu pedido foi confirmado!");
         } else {
             System.out.println("‚ùå Falha no pagamento do pedido: " + pedido);
         }
     }
 }
 
 // üè° Testando o sistema de pedidos (agora modularizado e extens√≠vel!)
//  public class Main {
//      public static void main(String[] args) {
//          // ‚úÖ Criamos diferentes configura√ß√µes de pagamento e notifica√ß√£o
//          ProcessadorPedido pedidoCartaoEmail = new ProcessadorPedido(new PagamentoCartao(), new NotificacaoEmail());
//          ProcessadorPedido pedidoPixSMS = new ProcessadorPedido(new PagamentoPix(), new NotificacaoSMS());
 
//          // ‚úÖ Agora podemos usar diferentes combina√ß√µes sem modificar a classe principal
//          pedidoCartaoEmail.processarPedido("Laptop Gamer", 5000, "cliente@email.com");
//          pedidoPixSMS.processarPedido("Mouse sem fio", 200, "11999999999");
//      }
//  } 