/**
 * üö® Viola√ß√£o do Princ√≠pio da Responsabilidade √önica (SRP - Single Responsibility Principle)
 *
 * Esta classe `RoboBaguncado` est√° violando o SRP, pois tem **m√∫ltiplas responsabilidades** 
 * dentro de uma √∫nica classe. Segundo o SRP, uma classe deve ter apenas **uma raz√£o para mudar**, 
 * mas aqui temos v√°rias fun√ß√µes independentes agrupadas em um s√≥ lugar.
 *
 * üî¥ **Problemas dessa abordagem:**
 * 1Ô∏è‚É£ **Dificuldade de manuten√ß√£o**: Se quisermos modificar apenas um comportamento, 
 *     como a forma de tocar m√∫sica, seremos obrigados a alterar uma classe que tamb√©m 
 *     cont√©m l√≥gica de limpeza, cozinha e cuidado com animais.
 *
 * 2Ô∏è‚É£ **Baixa reutiliza√ß√£o**: N√£o podemos usar o rob√¥ apenas para limpar ou apenas para cozinhar 
 *     sem carregar funcionalidades desnecess√°rias, tornando o c√≥digo menos modular.
 *
 * 3Ô∏è‚É£ **Dificuldade de expans√£o**: Se quisermos adicionar novas funcionalidades, como um rob√¥ 
 *     de seguran√ßa, ter√≠amos que modificar essa mesma classe, quebrando o Princ√≠pio Aberto/Fechado (OCP).
 *
 * 4Ô∏è‚É£ **Baixa coes√£o e alto acoplamento**: As responsabilidades dentro dessa classe s√£o 
 *     muito distintas e sem rela√ß√£o direta, tornando o c√≥digo dif√≠cil de entender e manter.
 *
 * üîπ **Solu√ß√£o correta:**
 *    - Criar classes separadas para cada funcionalidade (`RoboFaxineiro`, `RoboCozinheiro`, `RoboPet`, `RoboDJ`).
 *    - Utilizar **composi√ß√£o** para reunir esses rob√¥s dentro de uma classe `Casa`, que coordena as tarefas.
 */

 class RoboBaguncado {
    void limparCasa() {
        System.out.println("Limpando a casa...");
    }

    void cozinhar() {
        System.out.println("Cozinhando comida...");
    }

    void cuidarDoCachorro() {
        System.out.println("Dando comida para o cachorro...");
    }

    void tocarMusica() {
        System.out.println("Tocando m√∫sica...");
    }
}