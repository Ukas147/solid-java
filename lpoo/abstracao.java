/**
 * Abstra√ß√£o, Heran√ßa e Polimorfismo em Java
 *
 * Este c√≥digo demonstra os princ√≠pios fundamentais da Programa√ß√£o Orientada a Objetos (POO):
 *
 * üîπ **Abstra√ß√£o (`Veiculo`)**:
 *    - A classe `Veiculo` √© **abstrata**, o que significa que **n√£o pode ser instanciada diretamente**.
 *    - Cont√©m um m√©todo abstrato `mover()`, que **deve ser implementado** por todas as subclasses.
 *
 * üîπ **Heran√ßa**:
 *    - `Carro` e `Bicicleta` s√£o subclasses que herdam da superclasse `Veiculo`.
 *    - Ambas aproveitam o atributo `modelo` e o m√©todo `exibirModelo()`, definidos na superclasse.
 *
 * üîπ **Polimorfismo**:
 *    - Criamos objetos das subclasses (`Carro` e `Bicicleta`) usando refer√™ncias do tipo `Veiculo`.
 *    - Quando chamamos `mover()`, cada objeto executa sua **pr√≥pria vers√£o** do m√©todo, demonstrando **polimorfismo din√¢mico**.
 *
 * O c√≥digo cria e manipula ve√≠culos de forma gen√©rica, permitindo flexibilidade e reutiliza√ß√£o.
 */

// Classe abstrata (n√£o pode ser instanciada diretamente)
abstract class Veiculo {
  protected String modelo;

  // Construtor
  public Veiculo(String modelo) {
      this.modelo = modelo;
  }

  // M√©todo abstrato (deve ser implementado pelas subclasses)
  abstract void mover();

  // M√©todo comum (todas as subclasses podem usar)
  public void exibirModelo() {
      System.out.println("Modelo: " + modelo);
  }
}

// Subclasse Carro que herda de Veiculo
class Carro extends Veiculo {
  public Carro(String modelo) {
      super(modelo);
  }

  @Override
  void mover() {
      System.out.println("O carro " + modelo + " est√° acelerando!");
  }
}

// Subclasse Bicicleta que herda de Veiculo
class Bicicleta extends Veiculo {
  public Bicicleta(String modelo) {
      super(modelo);
  }

  @Override
  void mover() {
      System.out.println("A bicicleta " + modelo + " est√° pedalando!");
  }
}

// Classe principal (Main)
// public class Main {
//   public static void main(String[] args) {
//       // Criando objetos das subclasses usando polimorfismo
//       Veiculo carro = new Carro("Ferrari");
//       Veiculo bicicleta = new Bicicleta("Caloi");

//       // Chamando os m√©todos polim√≥rficos
//       carro.mover();       // "O carro Ferrari est√° acelerando!"
//       bicicleta.mover();   // "A bicicleta Caloi est√° pedalando!"

//       // Exibindo os modelos
//       carro.exibirModelo();      // "Modelo: Ferrari"
//       bicicleta.exibirModelo();  // "Modelo: Caloi"
//   }
// }