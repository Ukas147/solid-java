/**
 * Heran√ßa, Abstra√ß√£o e Polimorfismo em Java
 *
 * Este c√≥digo demonstra tr√™s conceitos fundamentais da Programa√ß√£o Orientada a Objetos (POO):
 * 
 * üîπ **Heran√ßa**: Permite que uma classe (subclasse) herde atributos e m√©todos de outra classe (superclasse),
 *     promovendo reutiliza√ß√£o de c√≥digo.
 * üîπ **Abstra√ß√£o**: A superclasse `Pessoa` √© **abstrata**, ou seja, n√£o pode ser instanciada diretamente,
 *     for√ßando suas subclasses a implementarem o m√©todo `exibirInformacoes()`.
 * üîπ **Polimorfismo**: Objetos da classe `Funcionario` e `Gerente` podem ser armazenados e manipulados 
 *     usando uma refer√™ncia do tipo `Pessoa`, permitindo flexibilidade no c√≥digo.
 *
 * Estrutura:
 * - `Pessoa` (superclasse abstrata) ‚Üí `Funcionario` (subclasse concreta) ‚Üí `Gerente` (especializa√ß√£o de Funcionario)
 * - `Gerente` possui uma **associa√ß√£o** com `Funcionario` (composi√ß√£o), pois pode ter uma equipe de funcion√°rios.
 * - A classe `Main` instancia os objetos e demonstra o uso de heran√ßa, polimorfismo e sobrescrita de m√©todos.
 */

 import java.util.ArrayList;
 import java.util.List;
 
 // üîπ Superclasse abstrata (n√£o pode ser instanciada diretamente)
 abstract class Pessoa {
     protected String nome;
     protected int idade;
 
     // Construtor
     public Pessoa(String nome, int idade) {
         this.nome = nome;
         this.idade = idade;
     }
 
     // M√©todo abstrato (cada subclasse deve implementar)
     abstract void exibirInformacoes();
 }
 
 // üîπ Subclasse Funcionario que herda de Pessoa
 class Funcionario extends Pessoa {
     protected double salario;
 
     // Construtor usando super para herdar nome e idade
     public Funcionario(String nome, int idade, double salario) {
         super(nome, idade);
         this.salario = salario;
     }
 
     // M√©todo que pode ser sobrescrito nas subclasses
     public void trabalhar() {
         System.out.println(nome + " est√° trabalhando...");
     }
 
     // Sobrescrevendo o m√©todo abstrato de Pessoa
     @Override
     void exibirInformacoes() {
         System.out.println("Funcion√°rio: " + nome + ", Idade: " + idade + ", Sal√°rio: R$" + salario);
     }
 }
 
 // üîπ Subclasse Gerente que herda de Funcionario
 class Gerente extends Funcionario {
     private List<Funcionario> equipe; // Gerente tem uma equipe de funcion√°rios
 
     // Construtor
     public Gerente(String nome, int idade, double salario) {
         super(nome, idade, salario);
         this.equipe = new ArrayList<>();
     }
 
     // M√©todo para adicionar funcion√°rio √† equipe
     public void adicionarFuncionario(Funcionario f) {
         equipe.add(f);
         System.out.println(f.nome + " foi adicionado √† equipe de " + nome);
     }
 
     // Sobrescrevendo m√©todo para diferenciar gerente
     @Override
     public void trabalhar() {
         System.out.println(nome + " est√° gerenciando a equipe!");
     }
 
     // Sobrescrevendo exibirInformacoes para mostrar equipe
     @Override
     void exibirInformacoes() {
         System.out.println("üîπ Gerente: " + nome + ", Idade: " + idade + ", Sal√°rio: R$" + salario);
         System.out.println("Equipe: ");
         for (Funcionario f : equipe) {
             System.out.println("   - " + f.nome);
         }
     }
 }
 
 // üîπ Classe principal (Main)
//  public class Main {
//      public static void main(String[] args) {
//          // Criando funcion√°rios e gerente
//          Funcionario f1 = new Funcionario("Carlos", 30, 3000);
//          Funcionario f2 = new Funcionario("Ana", 28, 3200);
//          Gerente g1 = new Gerente("Roberto", 40, 7000);
 
//          // Adicionando funcion√°rios √† equipe do gerente
//          g1.adicionarFuncionario(f1);
//          g1.adicionarFuncionario(f2);
 
//          // Criando lista de funcion√°rios gen√©rica (exemplo de polimorfismo)
//          List<Pessoa> pessoas = new ArrayList<>();
//          pessoas.add(f1);
//          pessoas.add(f2);
//          pessoas.add(g1);
 
//          // Exibindo informa√ß√µes de todos
//          System.out.println("\nüìå Lista de Funcion√°rios:");
//          for (Pessoa p : pessoas) {
//              p.exibirInformacoes();
//              System.out.println("-------------------");
//          }
 
//          // Testando m√©todos de trabalho
//          f1.trabalhar();
//          f2.trabalhar();
//          g1.trabalhar();
//      }
//  } 