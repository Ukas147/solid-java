/**
 * Interfaces, AbstraÃ§Ã£o, Polimorfismo e Sobrecarga de MÃ©todos em Java
 *
 * Este cÃ³digo demonstra diversos conceitos da ProgramaÃ§Ã£o Orientada a Objetos (POO):
 *
 * ðŸ”¹ **Interface (`Imprimivel`)**:
 *    - Define um contrato com o mÃ©todo `imprimirRecibo()`, que todas as classes de pagamento devem implementar.
 *
 * ðŸ”¹ **AbstraÃ§Ã£o (`Pagamento`)**:
 *    - Classe abstrata que contÃ©m um mÃ©todo abstrato `processarPagamento()`, garantindo que todas as subclasses
 *      implementem esse comportamento de forma especÃ­fica.
 *
 * ðŸ”¹ **Polimorfismo**:
 *    - A lista `List<Pagamento>` permite armazenar diferentes tipos de pagamento (`PagamentoCartao` e `PagamentoPix`).
 *    - O mÃ©todo `imprimirRecibo()` Ã© chamado de maneira polimÃ³rfica via interface `Imprimivel`.
 *
 * ðŸ”¹ **Sobrescrita (`@Override`)**:
 *    - Cada subclasse sobrescreve os mÃ©todos `processarPagamento()` e `imprimirRecibo()`, garantindo que cada tipo
 *      de pagamento tenha sua prÃ³pria implementaÃ§Ã£o.
 *
 * ðŸ”¹ **Sobrecarga de MÃ©todos (`PagamentoCartao.processarPagamento(double taxa)`)**:
 *    - A classe `PagamentoCartao` tem uma versÃ£o adicional do mÃ©todo `processarPagamento()`, permitindo calcular um
 *      pagamento com uma taxa extra.
 *
 * O cÃ³digo cria uma lista de pagamentos e processa cada um de forma polimÃ³rfica, garantindo flexibilidade e reutilizaÃ§Ã£o.
 */
 interface Imprimivel {
     void imprimirRecibo();
 }
 
 // ðŸ”¹ Classe abstrata base (superclasse)
 abstract class Pagamento implements Imprimivel {
     protected double valor;
 
     // Construtor
     public Pagamento(double valor) {
         this.valor = valor;
     }
 
     // MÃ©todo abstrato (cada subclasse deve implementar)
     public abstract void processarPagamento();
 
     // MÃ©todo sobrescrito da interface
     @Override
     public void imprimirRecibo() {
         System.out.println("Recibo: Pagamento de R$ " + valor);
     }
 }
 
 // ðŸ”¹ Subclasse de pagamento com cartÃ£o
 class PagamentoCartao extends Pagamento {
     private String numeroCartao;
 
     public PagamentoCartao(double valor, String numeroCartao) {
         super(valor);
         this.numeroCartao = numeroCartao;
     }
 
     @Override
     public void processarPagamento() {
         System.out.println("Processando pagamento de R$ " + valor + " via cartÃ£o: " + numeroCartao);
     }
 
     @Override
     public void imprimirRecibo() {
         System.out.println("Recibo: Pagamento de R$ " + valor + " realizado com cartÃ£o: " + numeroCartao);
     }
 
     // Sobrecarga: Processamento com taxa extra
     public void processarPagamento(double taxa) {
         double total = valor + taxa;
         System.out.println("Pagamento via cartÃ£o com taxa de R$ " + taxa + ". Total: R$ " + total);
     }
 }
 
 // ðŸ”¹ Subclasse de pagamento via Pix
 class PagamentoPix extends Pagamento {
     private String chavePix;
 
     public PagamentoPix(double valor, String chavePix) {
         super(valor);
         this.chavePix = chavePix;
     }
 
     @Override
     public void processarPagamento() {
         System.out.println("Processando pagamento de R$ " + valor + " via Pix para chave: " + chavePix);
     }
 
     @Override
     public void imprimirRecibo() {
         System.out.println("Recibo: Pagamento de R$ " + valor + " via Pix para chave: " + chavePix);
     }
 }
 
 // ðŸ”¹ Classe principal (Main)
//  public class Main {
//      public static void main(String[] args) {
//          // Criando lista de pagamentos polimÃ³rficos
//          List<Pagamento> pagamentos = new ArrayList<>();
 
//          pagamentos.add(new PagamentoCartao(150.0, "1234-5678-9012-3456"));
//          pagamentos.add(new PagamentoPix(75.0, "email@exemplo.com"));
//          pagamentos.add(new PagamentoCartao(200.0, "9876-5432-1098-7654"));
 
//          // Processando pagamentos de forma genÃ©rica
//          System.out.println("\nðŸ“Œ Processando pagamentos...");
//          for (Pagamento p : pagamentos) {
//              p.processarPagamento();
//          }
 
//          // Exibindo recibos polimorficamente
//          System.out.println("\nðŸ“Œ Imprimindo recibos...");
//          for (Imprimivel i : pagamentos) {
//              i.imprimirRecibo();
//          }
 
//          // Exemplo de uso do instanceof para polimorfismo dinÃ¢mico
//          System.out.println("\nðŸ“Œ Verificando tipos de pagamento...");
//          for (Pagamento p : pagamentos) {
//              if (p instanceof PagamentoCartao) {
//                  System.out.println("ðŸ”¹ Esse pagamento foi feito com CartÃ£o.");
//              } else if (p instanceof PagamentoPix) {
//                  System.out.println("ðŸ”¹ Esse pagamento foi feito com Pix.");
//              }
//          }
 
//          // Chamando mÃ©todo sobrecarregado para pagamento com taxa
//          System.out.println("\nðŸ“Œ Pagamento com taxa...");
//          PagamentoCartao pagamentoEspecial = new PagamentoCartao(500.0, "4321-8765-2109-6543");
//          pagamentoEspecial.processarPagamento(10.0); // Chama o mÃ©todo sobrecarregado
//      }
//  } 